pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'your-dockerhub-username/flask-app'
        SONAR_HOME = tool "Sonar"
    }
    stages {
        stage('Git: Code Checkout') {
            steps {
                echo 'Checking out code...'
                script {
                    checkout scm: [$class: 'GitSCM', branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/RohitGH29/SECURE-CI-CD-DOCKERFLASK.git']]]
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }
        stage('SonarQube Quality Analysis') {
            steps {
                echo 'SonarQube Quality Analysis...'
                withSonarQubeEnv("Sonar"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=SECURE-CI-CD-DOCKERFLASK -Dsonar.projectKey=SECURE-CI-CD-DOCKERFLASK"
                }
                
            }
        }
        stage('OWASP Dependency check') {
            steps {
                echo 'OWASP Dependency check...'
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher Pattern: '**/dependency-check-report.xml'
               
            }
        }
        stage('SonarQube Quality Gate Scan') {
            steps {
                echo 'SonarQube Quality Gate Scan...'
                timeout(time: 2,unit: "MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
               
            }
        }
        stage('Trivy file system Scan') {
            steps {
                echo 'Trivy file system Scan...'
                sh "trivy fs --format table -o trivy-fs-report.html ."
               
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
                sh 'docker push ${DOCKER_IMAGE}'
            }
        }
        stage('Deploy on Docker') {
            steps {
                echo 'Deploying application...'
                sh '''
                    docker stop flask-app || true
                    docker rm flask-app || true
                    docker run -d -p 5000:5000 --name flask-app ${DOCKER_IMAGE}
                '''
            }
        }
    }
}